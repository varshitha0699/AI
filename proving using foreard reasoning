import sys
import time
name_identity = 1000
def is_variable(term):
        if term[0].isupper() or term.startswith('_'):
            return True
        else:
            return False
class Term:
    #Constant or variable
    def _init_(self, term):
        term = term.strip()
        self.is_var = is_variable(term)
        self.term = term
    def _str_(self):
        return str(self.term)

    def _eq_(self, cmp):
        return self.is_var == cmp.is_var and self.term == cmp.term


class Statement:
    def _init_(self, list_of_terms = [], predicate = '', negative = False):
        self.list_of_terms = []
        for term in list_of_terms:
            self.list_of_terms.append(Term(term.term))
        self.predicate = predicate
        self.negative = negative
    def negate(self):
        return Statement(list_of_terms=self.list_of_terms, predicate=self.predicate, negative = not self.negative)
    def add_new_term(self,term):
        self.list_of_terms.append(term)
    def simplify(self):
        if len(self.list_of_terms)==1 and isinstance(self.list_of_terms[0],Conjunction):
            self.list_of_terms = self.list_of_terms[0].list_of_statements
    def _str_(self):
        output = self.predicate + '('
        for term in self.list_of_terms:
            output += str(term) + ', '
        output = output[:-2]+')'
        return output
    def _eq_(self, cmp):
        equal = True
        if len(self.list_of_terms)!=len(cmp.list_of_terms):
            return False
        else:
            for i in range(len(self.list_of_terms)):
                if not self.list_of_terms[i] == cmp.list_of_terms[i]:
                    equal = False
                    break
        return self.predicate == cmp.predicate and self.negative == cmp.negative and equal
    def is_identical(self,cmp):
        equal = True
        if len(self.list_of_terms)!=len(cmp.list_of_terms):
            return False
        else:
            for i in range(len(self.list_of_terms)):
                if self.list_of_terms[i].is_var == False and cmp.list_of_terms[i].is_var == False \
                and not self.list_of_terms[i] == cmp.list_of_terms[i]:
                    equal = False
                    break
        return self.predicate == cmp.predicate and self.negative == cmp.negative and equal
    def is_unificable(self,obj):
        return self.predicate == obj.predicate and self.negative == obj.negative and \
        len(self.list_of_terms) == len(obj.list_of_terms)
    def is_opposite(self,obj):
        return self.predicate == obj.predicate and self.negative != obj.negative and \
        len(self.list_of_terms) == len(obj.list_of_terms)
    def standardlize_variable(self,bind_dict = {}):
        global name_identity
        for index, term in enumerate(self.list_of_terms):
            if term.is_var:
                if not term.term in bind_dict:
                    name_identity += 1
                    bind_dict[term.term] = '_' + str(name_identity)
                self.list_of_terms[index] = Term(term = bind_dict[term.term])
        return bind_dict
    def get_variable_list(self):
        res = []
        for term in self.list_of_terms:
            if term.is_var:
                res.append(term.term)
        return res
class Conjunction:
    #Conjunction of statements
    def _init_(self, list_of_statements = []):
        self.list_of_statements = []
        for statement in list_of_statements:
            if isinstance(statement,Statement):
                self.list_of_statements.append(Statement(predicate = statement.predicate,\
                list_of_terms = statement.list_of_terms, negative = statement.negative))
            elif isinstance(statement,Conjunction):
                self.list_of_statements.append(Conjunction(statement.list_of_statements))
            elif isinstance(statement,Disjunction):
                self.list_of_statements.append(Disjunction(statement.list_of_statements))
    def negate(self):
        new_statements = []
        for statement in self.list_of_statements:
            new_statements.append(statement.negate())
        return Disjunction(new_statements)
    def add_new_statement(self, statement):
        self.list_of_statements.append(statement)
    def simplify(self):
        index = 0
        while index < len(self.list_of_statements):
            if isinstance(self.list_of_statements[index],Conjunction):
                self.list_of_statements[index].simplify()
                l = len(self.list_of_statements[index].list_of_statements)
                for i,statement in enumerate(self.list_of_statements[index].list_of_statements):
                    self.list_of_statements.insert(index + i + 1,statement)
                del self.list_of_statements[index]
                index+=l-1
            elif isinstance(self.list_of_statements[index],Disjunction):
                self.list_of_statements[index].simplify()
            index+=1

    def _str_(self):
        output = '('
        for statement in self.list_of_statements:
            output+=str(statement)+' & '
        return output[:-3]+')'
    def _eq_(self,cmp):
        if len(self.list_of_statements) != len(cmp.list_of_statements):
            return False
        else:
            equal = True
            for i in range(len(self.list_of_statements)):
                if not self.list_of_statements[i] == cmp.list_of_statements[i]:
                    equal = False
                    break
            return equal
    def split(self):
        list_of_new_con = []
        has_dis = False
        for index,statement in enumerate(self.list_of_statements):
            if isinstance(statement,Disjunction):
                has_dis = True
                for statement_dis in statement.list_of_statements:
                    new_list = self.list_of_statements.copy()
                    new_list[index] = statement_dis
                    new_conj = Conjunction(new_list)
                    new_conj.simplify()
                    list_of_new_con = list_of_new_con + new_conj.split()
                break
        if has_dis == False:
            list_of_new_con.append(self)
        return list_of_new_con


class Disjunction:
    #Disjunction of statements
    def _init_(self, list_of_statements = []):
        self.list_of_statements = []
        for statement in list_of_statements:
            if isinstance(statement,Statement):
                self.list_of_statements.append(Statement(predicate = statement.predicate,\
                list_of_terms = statement.list_of_terms, negative = statement.negative))
            elif isinstance(statement,Conjunction):
                self.list_of_statements.append(Conjunction(statement.list_of_statements))
            elif isinstance(statement,Disjunction):
                self.list_of_statements.append(Disjunction(statement.list_of_statements))
    def negate(self):
        new_statements = []
        for statement in self.list_of_statements:
            new_statements.append(statement.negate())
        return Conjunction(new_statements)
    def add_new_statement(self, statement):
        self.list_of_statements.append(statement)
    def _str_(self):
        output = '('
        for statement in self.list_of_statements:
            output+=str(statement)+' ; '
        return output[:-3]+')'
    def simplify(self):
        index = 0
        while index < len(self.list_of_statements):
            if isinstance(self.list_of_statements[index],Disjunction):
                self.list_of_statements[index].simplify()
                l = len(self.list_of_statements[index].list_of_statements)
                for i,statement in enumerate(self.list_of_statements[index].list_of_statements):
                    self.list_of_statements.insert(index + i + 1,statement)
                del self.list_of_statements[index]
                index+=l-1
            elif isinstance(self.list_of_statements[index],Conjunction):
                self.list_of_statements[index].simplify()
            index+=1
    def _eq_(self,cmp):
        if len(self.list_of_statements) != len(cmp.list_of_statements):
            return False
        else:
            equal = True
            for i in range(len(self.list_of_statements)):
                if not self.list_of_statements[i] == cmp.list_of_statements[i]:
                    equal = False
                    break
            return equal
class Rule:
    #Define a rule with left and right hand side are Conjunction of statements
    def _init_(self, lhs, rhs = None):
        self.lhs = lhs
        self.rhs = rhs
        self.difference = []
        self.supported = [[] for _ in range(len(rhs.list_of_statements))]
    def _str_(self):
        return str(self.lhs) + ' <- ' + str(self.rhs)
    def split(self):
        list_of_new_rules = []
        new_conj = self.rhs.split()
        for conj in new_conj:
            list_of_new_rules.append(Rule(Statement(list_of_terms=self.lhs.list_of_terms,predicate = self.lhs.predicate, negative = self.lhs.negative),conj))
        return list_of_new_rules
    def get_supported_fact(self,list_of_facts):
        for index in range(len(self.rhs.list_of_statements)):
            for fact in list_of_facts:
                if fact.is_unificable(self.rhs.list_of_statements[index]):
                    self.supported[index].append(fact)
    def standardlize_variable(self):
        bind_dict = {}
        bind_dict = self.lhs.standardlize_variable(bind_dict=bind_dict)
        for statement in self.rhs.list_of_statements:
            bind_dict = statement.standardlize_variable(bind_dict=bind_dict)
        for difference in self.difference:
            difference[0].term = bind_dict[difference[0].term]
            difference[1].term = bind_dict[difference[1].term]
    def list_supported_facts(self):
        support_list = [[]]
        for fact_list in self.supported:
            if len(fact_list) == 0:
                return []
            else:
                new = []
                for fact in fact_list:
                    for sublist in support_list:
                        new_sublist = []
                        for statement in sublist:
                            new_sublist.append(Statement(predicate= statement.predicate, negative = statement.negative,\
                            list_of_terms = statement.list_of_terms))
                        new_sublist.append(fact)
                        new.append(new_sublist)
                support_list = new
        return support_list
    def check_difference(self, binding):
        differ = True
        for difference in self.difference:
            if binding.bind(difference[0]) == binding.bind(difference[1]):
                differ = False
                break
        return differ
    def eliminate_difference(self):
        for index,statement in enumerate(self.rhs.list_of_statements):
            if statement.predicate =='\=':
                self.difference.append([Term(statement.list_of_terms[0].term),Term(statement.list_of_terms[1].term)])
                del self.rhs.list_of_statements[index]
                del self.supported[index]


def is_operator(c):
    return c=='&' or c == ';'
def is_higher_precedence(a,b):
    return a == '&' and b == ';'

#Change to Reverse Polish Notation
def change_to_RPN(tokens):
    operator_stack = []
    output = []
    for token in tokens:
        if token == '(':
            operator_stack.append(token)
        elif token == ')':
            operator = operator_stack.pop()
            while operator != '(':
                output.append(operator)
                operator = operator_stack.pop()
        elif is_operator(token):
            while len(operator_stack)>0 and (operator_stack[-1].endswith('*') or \
            is_higher_precedence(operator_stack[-1],token) or operator_stack[-1]==token) and (operator_stack[-1]!='('):
                output.append(operator_stack.pop())
            operator_stack.append(token)
